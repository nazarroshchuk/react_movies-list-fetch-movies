{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Loader/Loader.jsx","components/FindMovie/FindMovie.js","api/api.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","Loader","children","isLoad","FindMovie","addMovieHandler","isDuplicate","setIsDuplicate","isAdd","setIsAdd","useState","setTitle","foundMovie","setFoundMovie","isFound","setIsFound","setIsLoad","findMovieHandler","useCallback","fetch","then","response","ok","Error","status","statusText","json","getMovies","onChangeInputHandler","e","target","value","htmlFor","type","id","placeholder","onChange","Title","onClick","disabled","Plot","Poster","Website","defaultProps","App","mov","setMovies","useEffect","undefined","imdbID","some","m","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.146dabc4.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport './Loader.css';\n\nexport const Loader = ({ children, isLoad }) => {\n  if (isLoad) {\n    return (\n      <div className=\"lds-ripple\">\n        <div />\n        <div />\n      </div>\n    );\n  }\n\n  return children;\n};\n","import React, { useState, useCallback } from 'react';\nimport './FindMovie.scss';\n\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\nimport { getMovies } from '../../api/api';\nimport { Loader } from '../Loader/Loader';\n\nexport const FindMovie = (\n  {\n    addMovieHandler,\n    isDuplicate,\n    setIsDuplicate,\n    isAdd,\n    setIsAdd,\n  },\n) => {\n  const [title, setTitle] = useState('');\n  const [foundMovie, setFoundMovie] = useState(null);\n  const [isFound, setIsFound] = useState(false);\n  const [isLoad, setIsLoad] = useState(false);\n\n  const findMovieHandler = useCallback(() => {\n    setIsLoad(true);\n    getMovies(title).then((response) => {\n      if (response.Error) {\n        setIsFound(true);\n        setFoundMovie('');\n\n        return;\n      }\n\n      setFoundMovie(response);\n      setIsFound(false);\n      setIsLoad(false);\n    });\n  }, [title]);\n\n  const onChangeInputHandler = useCallback((e) => {\n    setTitle(e.target.value);\n    setIsFound(false);\n    setFoundMovie('');\n    setIsDuplicate(false);\n    setIsAdd(false);\n  }, [setIsDuplicate, setIsAdd]);\n\n  // if (foundMovie) {\n  //   setAddActive(false);\n  // }\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-danger\"\n              value={title}\n              onChange={onChangeInputHandler}\n            />\n          </div>\n          <div>\n            {isFound && (\n            <p className=\"help  is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n            )}\n            {isDuplicate && (\n            <p className=\"help  is-danger\">\n              This movie already exists in collection\n            </p>\n            )}\n            {isAdd && (\n              <p className=\"success-add\">\n                <strong>{foundMovie.Title}</strong>\n                {' '}\n                movie was added!\n              </p>\n            )}\n          </div>\n        </div>\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovieHandler}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => addMovieHandler(foundMovie)}\n              disabled={!foundMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        <Loader isLoad={isLoad}>\n          {!isFound && foundMovie\n        && (\n          <MovieCard\n            title={foundMovie.Title}\n            description={foundMovie.Plot}\n            imgUrl={foundMovie.Poster}\n            imdbUrl={foundMovie.Website}\n          />\n        )}\n        </Loader>\n\n      </div>\n    </>\n  );\n};\n\nFindMovie.defaultProps = {\n  isDuplicate: 'null',\n  isAdd: false,\n};\n\nFindMovie.propTypes = {\n  addMovieHandler: PropTypes.func.isRequired,\n  setIsDuplicate: PropTypes.func.isRequired,\n  setIsAdd: PropTypes.func.isRequired,\n  isDuplicate: PropTypes.bool,\n  isAdd: PropTypes.bool,\n};\n","export function getMovies(title) {\n  return fetch(`https://www.omdbapi.com/?apikey=e2d69361&t=${title}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport movies from './api/movies.json';\n\nexport const App = () => {\n  const [mov, setMovies] = useState([]);\n  const [isDuplicate, setIsDuplicate] = useState(null);\n  const [isAdd, setIsAdd] = useState(false);\n\n  useEffect(() => {\n    setMovies([...movies]);\n  }, []);\n\n  const addMovieHandler = useCallback((movie) => {\n    if (\n      movie.imdbID !== undefined\n      && !mov.some(m => m.imdbId === movie.imdbID)\n    ) {\n      setMovies([\n        ...mov,\n        {\n          title: movie.Title,\n          description: movie.Plot,\n          imgUrl: movie.Poster,\n          imdbUrl: movie.Website,\n          imdbId: movie.imdbID,\n        },\n      ]);\n\n      setIsAdd(true);\n      setIsDuplicate(false);\n    } else {\n      setIsDuplicate(true);\n    }\n  }, [mov]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={mov} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovieHandler={addMovieHandler}\n          isDuplicate={isDuplicate}\n          setIsDuplicate={setIsDuplicate}\n          isAdd={isAdd}\n          setIsAdd={setIsAdd}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}